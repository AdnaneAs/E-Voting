/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface VoterRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "authorizeContract"
      | "authorizedContracts"
      | "deauthorizeContract"
      | "getVoterDetails"
      | "hasVoterVoted"
      | "isVoterRegistered"
      | "owner"
      | "pause"
      | "paused"
      | "registerVoter"
      | "renounceOwnership"
      | "totalVoters"
      | "transferOwnership"
      | "unpause"
      | "updateVoterStatus"
      | "voters"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ContractAuthorized"
      | "ContractDeauthorized"
      | "OwnershipTransferred"
      | "Paused"
      | "Unpaused"
      | "VoterRegistered"
      | "VoterStatusUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "authorizeContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedContracts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deauthorizeContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterDetails",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoterVoted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isVoterRegistered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerVoter",
    values: [AddressLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalVoters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateVoterStatus",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "voters", values: [AddressLike]): string;

  decodeFunctionResult(
    functionFragment: "authorizeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deauthorizeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasVoterVoted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVoterRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerVoter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVoters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateVoterStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voters", data: BytesLike): Result;
}

export namespace ContractAuthorizedEvent {
  export type InputTuple = [contractAddress: AddressLike];
  export type OutputTuple = [contractAddress: string];
  export interface OutputObject {
    contractAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContractDeauthorizedEvent {
  export type InputTuple = [contractAddress: AddressLike];
  export type OutputTuple = [contractAddress: string];
  export interface OutputObject {
    contractAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoterRegisteredEvent {
  export type InputTuple = [
    voterAddress: AddressLike,
    cin: string,
    fullName: string
  ];
  export type OutputTuple = [
    voterAddress: string,
    cin: string,
    fullName: string
  ];
  export interface OutputObject {
    voterAddress: string;
    cin: string;
    fullName: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoterStatusUpdatedEvent {
  export type InputTuple = [voterAddress: AddressLike, hasVoted: boolean];
  export type OutputTuple = [voterAddress: string, hasVoted: boolean];
  export interface OutputObject {
    voterAddress: string;
    hasVoted: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VoterRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): VoterRegistry;
  waitForDeployment(): Promise<this>;

  interface: VoterRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  authorizeContract: TypedContractMethod<
    [_contract: AddressLike],
    [void],
    "nonpayable"
  >;

  authorizedContracts: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  deauthorizeContract: TypedContractMethod<
    [_contract: AddressLike],
    [void],
    "nonpayable"
  >;

  getVoterDetails: TypedContractMethod<
    [_voterAddress: AddressLike],
    [
      [boolean, boolean, string, string] & {
        isRegistered: boolean;
        hasVoted: boolean;
        cin: string;
        fullName: string;
      }
    ],
    "view"
  >;

  hasVoterVoted: TypedContractMethod<
    [_voterAddress: AddressLike],
    [boolean],
    "view"
  >;

  isVoterRegistered: TypedContractMethod<
    [_voterAddress: AddressLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  registerVoter: TypedContractMethod<
    [_voterAddress: AddressLike, _cin: string, _fullName: string],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  totalVoters: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateVoterStatus: TypedContractMethod<
    [_voterAddress: AddressLike, _hasVoted: boolean],
    [void],
    "nonpayable"
  >;

  voters: TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, boolean, string, string] & {
        isRegistered: boolean;
        hasVoted: boolean;
        cin: string;
        fullName: string;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "authorizeContract"
  ): TypedContractMethod<[_contract: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizedContracts"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "deauthorizeContract"
  ): TypedContractMethod<[_contract: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getVoterDetails"
  ): TypedContractMethod<
    [_voterAddress: AddressLike],
    [
      [boolean, boolean, string, string] & {
        isRegistered: boolean;
        hasVoted: boolean;
        cin: string;
        fullName: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasVoterVoted"
  ): TypedContractMethod<[_voterAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isVoterRegistered"
  ): TypedContractMethod<[_voterAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerVoter"
  ): TypedContractMethod<
    [_voterAddress: AddressLike, _cin: string, _fullName: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalVoters"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateVoterStatus"
  ): TypedContractMethod<
    [_voterAddress: AddressLike, _hasVoted: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "voters"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, boolean, string, string] & {
        isRegistered: boolean;
        hasVoted: boolean;
        cin: string;
        fullName: string;
      }
    ],
    "view"
  >;

  getEvent(
    key: "ContractAuthorized"
  ): TypedContractEvent<
    ContractAuthorizedEvent.InputTuple,
    ContractAuthorizedEvent.OutputTuple,
    ContractAuthorizedEvent.OutputObject
  >;
  getEvent(
    key: "ContractDeauthorized"
  ): TypedContractEvent<
    ContractDeauthorizedEvent.InputTuple,
    ContractDeauthorizedEvent.OutputTuple,
    ContractDeauthorizedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "VoterRegistered"
  ): TypedContractEvent<
    VoterRegisteredEvent.InputTuple,
    VoterRegisteredEvent.OutputTuple,
    VoterRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "VoterStatusUpdated"
  ): TypedContractEvent<
    VoterStatusUpdatedEvent.InputTuple,
    VoterStatusUpdatedEvent.OutputTuple,
    VoterStatusUpdatedEvent.OutputObject
  >;

  filters: {
    "ContractAuthorized(address)": TypedContractEvent<
      ContractAuthorizedEvent.InputTuple,
      ContractAuthorizedEvent.OutputTuple,
      ContractAuthorizedEvent.OutputObject
    >;
    ContractAuthorized: TypedContractEvent<
      ContractAuthorizedEvent.InputTuple,
      ContractAuthorizedEvent.OutputTuple,
      ContractAuthorizedEvent.OutputObject
    >;

    "ContractDeauthorized(address)": TypedContractEvent<
      ContractDeauthorizedEvent.InputTuple,
      ContractDeauthorizedEvent.OutputTuple,
      ContractDeauthorizedEvent.OutputObject
    >;
    ContractDeauthorized: TypedContractEvent<
      ContractDeauthorizedEvent.InputTuple,
      ContractDeauthorizedEvent.OutputTuple,
      ContractDeauthorizedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "VoterRegistered(address,string,string)": TypedContractEvent<
      VoterRegisteredEvent.InputTuple,
      VoterRegisteredEvent.OutputTuple,
      VoterRegisteredEvent.OutputObject
    >;
    VoterRegistered: TypedContractEvent<
      VoterRegisteredEvent.InputTuple,
      VoterRegisteredEvent.OutputTuple,
      VoterRegisteredEvent.OutputObject
    >;

    "VoterStatusUpdated(address,bool)": TypedContractEvent<
      VoterStatusUpdatedEvent.InputTuple,
      VoterStatusUpdatedEvent.OutputTuple,
      VoterStatusUpdatedEvent.OutputObject
    >;
    VoterStatusUpdated: TypedContractEvent<
      VoterStatusUpdatedEvent.InputTuple,
      VoterStatusUpdatedEvent.OutputTuple,
      VoterStatusUpdatedEvent.OutputObject
    >;
  };
}
